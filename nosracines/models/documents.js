// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Documents = sequelize.define('documents', {
    name: {
      type: DataTypes.STRING,
    },
    date: {
      type: DataTypes.DATEONLY,
    },
    reference: {
      type: DataTypes.STRING,
    },
    location: {
      type: DataTypes.STRING,
    },
    privacy: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'documents',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Documents.associate = (models) => {
    Documents.belongsTo(models.funds, {
      foreignKey: {
        name: 'fundIdKey',
        field: 'fund_id',
      },
      as: 'fund',
    });
    Documents.belongsToMany(models.people, {
      through: 'documentsPeople',
      foreignKey: 'document_id',
      otherKey: 'person_id',
      as: 'peopleThroughDocumentsPeople',
    });
    Documents.belongsToMany(models.sources, {
      through: 'documentsSources',
      foreignKey: 'document_id',
      otherKey: 'source_id',
      as: 'sourcesThroughDocumentsSources',
    });
    Documents.hasMany(models.files, {
      foreignKey: {
        name: 'documentIdKey',
        field: 'document_id',
      },
      as: 'files',
    });
  };

  return Documents;
};
